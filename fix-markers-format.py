#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
+ –ß–∏—Å–ª–æ–≤—ã–µ ID + –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
"""

import os
import json
import re
from datetime import datetime

def check_current_format():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –§–û–†–ú–ê–¢–ê –ú–ê–†–ö–ï–†–û–í")
    print("=" * 50)
    
    markers_file = r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world\live\markers.json"
    
    if not os.path.exists(markers_file):
        print("‚ùå –§–∞–π–ª live/markers.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        with open(markers_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(data)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for cat_name, cat_data in list(data.items())[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            print(f"\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name}")
            print(f"   –¢–∏–ø: {type(cat_data)}")
            
            if isinstance(cat_data, dict):
                print(f"   –ö–ª—é—á–∏: {list(cat_data.keys())}")
                
                if 'markers' in cat_data:
                    markers = cat_data['markers']
                    print(f"   –ú–∞—Ä–∫–µ—Ä–æ–≤: {len(markers)}")
                    
                    if len(markers) > 0:
                        first_marker_id = list(markers.keys())[0]
                        first_marker = markers[first_marker_id]
                        print(f"   –ü–µ—Ä–≤—ã–π –º–∞—Ä–∫–µ—Ä ID: {first_marker_id}")
                        print(f"   –ü–µ—Ä–≤—ã–π –º–∞—Ä–∫–µ—Ä: {list(first_marker.keys()) if isinstance(first_marker, dict) else type(first_marker)}")
                        
                        if isinstance(first_marker, dict):
                            print(f"   Label: {first_marker.get('label', '–ù–ï–¢')}")
                            print(f"   Type: {first_marker.get('type', '–ù–ï–¢')}")
                            print(f"   Position: {first_marker.get('position', '–ù–ï–¢')}")
        
        return data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

def fix_markers_format(data):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–†–ú–ê–¢–ê –ú–ê–†–ö–ï–†–û–í")
    print("=" * 50)
    
    fixed_data = {}
    marker_counter = 1
    
    for cat_name, cat_data in data.items():
        if not isinstance(cat_data, dict) or 'markers' not in cat_data:
            continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        fixed_category = {
            "label": cat_data.get('label', cat_name),
            "toggleable": True,
            "defaultHidden": False,
            "sorting": 0,
            "markers": {}
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã
        markers = cat_data['markers']
        print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {cat_name}: {len(markers)} –º–∞—Ä–∫–µ—Ä–æ–≤")
        
        for marker_id, marker_data in markers.items():
            if not isinstance(marker_data, dict):
                continue
            
            # –°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not marker_id.startswith('marker_'):
                new_marker_id = f"marker_{marker_counter}"
                marker_counter += 1
            else:
                new_marker_id = marker_id
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID
                match = re.search(r'marker_(\d+)', marker_id)
                if match:
                    num = int(match.group(1))
                    if num >= marker_counter:
                        marker_counter = num + 1
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–∞—Ä–∫–µ—Ä–∞
            fixed_marker = {
                "type": marker_data.get('type', 'poi'),
                "label": marker_data.get('label', f'–ú–∞—Ä–∫–µ—Ä {marker_counter}'),
                "position": {
                    "x": float(marker_data.get('position', {}).get('x', 0)),
                    "y": float(marker_data.get('position', {}).get('y', 65)),
                    "z": float(marker_data.get('position', {}).get('z', 0))
                },
                "anchor": {
                    "x": 16,
                    "y": 16
                },
                "sorting": 100,
                "listed": True,
                "minDistance": 10,
                "maxDistance": 100000
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            if 'icon' in marker_data:
                fixed_marker["icon"] = marker_data['icon']
            else:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                icon_map = {
                    'category_1': 'assets/church.png',    # –ì–æ—Ä–æ–¥–∞
                    'category_2': 'assets/monument.png',   # –û–±–ª–∞—Å—Ç–∏  
                    'category_3': 'assets/poi.svg',        # –ú–∞—Ä–∫–µ—Ä—ã
                    'category_4': 'assets/village.png',    # –î–µ—Ä–µ–≤–Ω–∏
                    'category_5': 'assets/monument.png',   # –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    'category_6': 'assets/village.png'     # –ü–æ—Å—ë–ª–∫–∏
                }
                fixed_marker["icon"] = icon_map.get(cat_name, 'assets/poi.svg')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
            fixed_marker["originalName"] = marker_data.get('originalName', marker_data.get('label', ''))
            fixed_marker["categoryName"] = cat_data.get('label', cat_name)
            fixed_marker["originalId"] = marker_data.get('originalId', marker_id)
            
            fixed_category["markers"][new_marker_id] = fixed_marker
        
        fixed_data[cat_name] = fixed_category
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(fixed_data)}")
    print(f"‚úÖ –°–ª–µ–¥—É—é—â–∏–π ID –º–∞—Ä–∫–µ—Ä–∞: marker_{marker_counter}")
    
    return fixed_data, marker_counter

def create_marker_index(data):
    """–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    print("\nüìã –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–ê –ú–ê–†–ö–ï–†–û–í")
    print("=" * 50)
    
    index = {
        "by_id": {},
        "by_name": {},
        "categories": {}
    }
    
    for cat_id, cat_data in data.items():
        if not isinstance(cat_data, dict) or 'markers' not in cat_data:
            continue
        
        cat_name = cat_data.get('label', cat_id)
        category_markers = []
        
        for marker_id, marker_data in cat_data['markers'].items():
            if not isinstance(marker_data, dict):
                continue
            
            marker_name = marker_data.get('label', '')
            
            # –ò–Ω–¥–µ–∫—Å –ø–æ ID
            index["by_id"][marker_id] = {
                "category_id": cat_id,
                "category_name": cat_name,
                "marker_name": marker_name
            }
            
            # –ò–Ω–¥–µ–∫—Å –ø–æ –∏–º–µ–Ω–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞)
            index["by_name"][marker_name.lower()] = {
                "marker_id": marker_id,
                "category_id": cat_id,
                "category_name": cat_name
            }
            
            # –°–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_markers.append({
                "marker_id": marker_id,
                "marker_name": marker_name
            })
        
        index["categories"][cat_id] = {
            "name": cat_name,
            "marker_count": len(category_markers),
            "markers": category_markers
        }
    
    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {len(index['by_id'])}")
    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏–º–µ–Ω: {len(index['by_name'])}")
    print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(index['categories'])}")
    
    return index

def save_fixed_data(data, index, next_marker_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    paths = [
        "bluemap-test/web/maps/world",
        r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world"
    ]
    
    for base_path in paths:
        live_path = os.path.join(base_path, "live")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É live –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs(live_path, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤
        markers_file = os.path.join(live_path, "markers.json")
        with open(markers_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {markers_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å
        index_file = os.path.join(base_path, "markers_index.json")
        with open(index_file, 'w', encoding='utf-8') as f:
            json.dump(index, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {index_file}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta_file = os.path.join(base_path, "markers_meta.json")
        meta_data = {
            "next_marker_id": next_marker_id,
            "last_update": datetime.now().isoformat(),
            "total_markers": len(index['by_id']),
            "total_categories": len(index['categories'])
        }
        with open(meta_file, 'w', encoding='utf-8') as f:
            json.dump(meta_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: {meta_file}")

def create_marker_commands_integration():
    """–°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º"""
    
    print("\nüéÆ –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ú–ê–ù–î")
    print("=" * 50)
    
    commands_script = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞–º–∏ —Å —á–∏—Å–ª–æ–≤—ã–º–∏ ID
"""

import os
import json
from datetime import datetime

def load_markers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ä–∫–µ—Ä—ã"""
    markers_file = r"c:\\Personal\\TestServer\\plugins\\BlueMap\\web\\maps\\world\\live\\markers.json"
    meta_file = r"c:\\Personal\\TestServer\\plugins\\BlueMap\\web\\maps\\world\\markers_meta.json"
    
    if os.path.exists(markers_file):
        with open(markers_file, 'r', encoding='utf-8') as f:
            markers = json.load(f)
    else:
        markers = {}
    
    if os.path.exists(meta_file):
        with open(meta_file, 'r', encoding='utf-8') as f:
            meta = json.load(f)
    else:
        meta = {"next_marker_id": 1}
    
    return markers, meta

def save_markers(markers, meta):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã"""
    paths = [
        "bluemap-test/web/maps/world",
        r"c:\\Personal\\TestServer\\plugins\\BlueMap\\web\\maps\\world"
    ]
    
    for base_path in paths:
        live_path = os.path.join(base_path, "live")
        os.makedirs(live_path, exist_ok=True)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        markers_file = os.path.join(live_path, "markers.json")
        with open(markers_file, 'w', encoding='utf-8') as f:
            json.dump(markers, f, ensure_ascii=False, indent=2)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        meta_file = os.path.join(base_path, "markers_meta.json")
        meta["last_update"] = datetime.now().isoformat()
        with open(meta_file, 'w', encoding='utf-8') as f:
            json.dump(meta, f, ensure_ascii=False, indent=2)

def add_marker(category_id, name, x, y, z, description=""):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä"""
    markers, meta = load_markers()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID
    marker_id = f"marker_{meta['next_marker_id']}"
    meta['next_marker_id'] += 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if category_id not in markers:
        markers[category_id] = {
            "label": f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id}",
            "toggleable": True,
            "defaultHidden": False,
            "sorting": 0,
            "markers": {}
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
    markers[category_id]["markers"][marker_id] = {
        "type": "poi",
        "label": name,
        "position": {"x": float(x), "y": float(y), "z": float(z)},
        "anchor": {"x": 16, "y": 16},
        "icon": "assets/poi.svg",
        "sorting": 100,
        "listed": True,
        "minDistance": 10,
        "maxDistance": 100000,
        "originalName": name,
        "categoryName": markers[category_id]["label"],
        "originalId": marker_id
    }
    
    save_markers(markers, meta)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä {marker_id}: {name} –≤ {category_id}")
    return marker_id

def find_marker(search_term):
    """–ò—â–µ—Ç –º–∞—Ä–∫–µ—Ä –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID"""
    markers, _ = load_markers()
    
    found = []
    search_lower = search_term.lower()
    
    for cat_id, cat_data in markers.items():
        if 'markers' not in cat_data:
            continue
        
        for marker_id, marker_data in cat_data['markers'].items():
            marker_name = marker_data.get('label', '').lower()
            
            if (search_lower in marker_name or 
                search_term == marker_id or
                search_lower == marker_name):
                
                found.append({
                    "id": marker_id,
                    "name": marker_data.get('label', ''),
                    "category": cat_id,
                    "position": marker_data.get('position', {})
                })
    
    return found

if __name__ == "__main__":
    print("üéÆ –ö–û–ú–ê–ù–î–´ –ú–ê–†–ö–ï–†–û–í")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("add_marker('category_1', '–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥', 100, 70, 200)")
    print("find_marker('–≥–æ—Ä–æ–¥')")
'''
    
    with open("marker_commands.py", 'w', encoding='utf-8') as f:
        f.write(commands_script)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω marker_commands.py")

def main():
    print("üõ†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–û–†–ú–ê–¢–ê –ú–ê–†–ö–ï–†–û–í")
    print("=" * 50)
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç
    data = check_current_format()
    if not data:
        return
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    fixed_data, next_marker_id = fix_markers_format(data)
    
    # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
    index = create_marker_index(fixed_data)
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_fixed_data(fixed_data, index, next_marker_id)
    
    # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥
    create_marker_commands_integration()
    
    print("\n" + "=" * 50)
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 50)
    
    print("\nüìã –ß–¢–û –ò–°–ü–†–ê–í–õ–ï–ù–û:")
    print("‚úÖ –§–æ—Ä–º–∞—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É BlueMap")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ ID (marker_1, marker_2, ...)")
    print("‚úÖ –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    print("‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    print("\nüéÆ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î:")
    print("from marker_commands import add_marker, find_marker")
    print("add_marker('category_1', '–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥', 100, 70, 200)")
    print("find_marker('–≥–æ—Ä–æ–¥')")
    
    print("\nüîÑ –ü–ï–†–ï–ó–ê–ü–£–°–¢–ò–¢–ï –¢–ï–°–¢–û–í–´–ô –°–ï–†–í–ï–†:")
    print("python test-server-fix.py")

if __name__ == "__main__":
    main() 