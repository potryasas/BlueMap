#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç settings.json –¥–ª—è BlueMap
"""

import json
import os

def fix_settings_json():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª settings.json"""
    
    print("=" * 60)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SETTINGS.JSON")
    print("=" * 60)
    
    settings_file = r"c:\Personal\TestServer\plugins\BlueMap\web\settings.json"
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ settings.json
    correct_settings = {
        "version": 1,
        "maps": {
            "world": {
                "enabled": True,
                "name": "World",
                "world": "world",
                "sorting": 0
            }
        },
        "scripts": [],
        "styles": []
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists(settings_file):
            backup_file = settings_file + ".backup"
            with open(settings_file, 'r', encoding='utf-8') as f:
                backup_content = f.read()
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(backup_content)
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: settings.json.backup")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π settings.json
        with open(settings_file, 'w', encoding='utf-8') as f:
            json.dump(correct_settings, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {settings_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open(settings_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if 'maps' in data and 'world' in data['maps']:
            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
            print(f"üìç –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: {data['maps']['world']['name']}")
            return True
        else:
            print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –≤—Å—ë –µ—â—ë –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è settings.json: {e}")
        return False

def copy_source_settings():
    """–ö–æ–ø–∏—Ä—É–µ—Ç settings.json –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    
    print("\nüìã –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ò–°–•–û–î–ù–û–ì–û SETTINGS.JSON")
    
    source_settings = "bluemap-test/web/settings.json"
    target_settings = r"c:\Personal\TestServer\plugins\BlueMap\web\settings.json"
    
    if os.path.exists(source_settings):
        try:
            # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            with open(source_settings, 'r', encoding='utf-8') as f:
                source_data = json.load(f)
            
            print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π settings.json:")
            print(f"   –í–µ—Ä—Å–∏—è: {source_data.get('version', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            print(f"   –ö–∞—Ä—Ç: {len(source_data.get('maps', {}))}")
            
            # –ö–æ–ø–∏—Ä—É–µ–º
            import shutil
            shutil.copy2(source_settings, target_settings)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π settings.json")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    else:
        print(f"‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_settings}")
        return False

def check_maps_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç"""
    
    print("\nüó∫Ô∏è –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ö–ê–†–¢")
    
    settings_file = r"c:\Personal\TestServer\plugins\BlueMap\web\settings.json"
    
    try:
        with open(settings_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if 'maps' not in data:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è 'maps'")
            return False
        
        maps = data['maps']
        
        if not isinstance(maps, dict):
            print("‚ùå 'maps' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç: {len(maps)}")
        
        for map_id, map_data in maps.items():
            print(f"üìç –ö–∞—Ä—Ç–∞ '{map_id}':")
            print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {map_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
            print(f"   - –í–∫–ª—é—á–µ–Ω–∞: {map_data.get('enabled', False)}")
            print(f"   - –ú–∏—Ä: {map_data.get('world', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö BlueMap")
    print("=" * 60)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    if copy_source_settings():
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π settings.json")
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—Ä—É—á–Ω—É—é
        if fix_settings_json():
            print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π settings.json")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å settings.json")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if check_maps_structure():
        print("\nüéâ SETTINGS.JSON –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É BlueMap (Ctrl+F5)")
        print("2. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏")
        print("3. üó∫Ô∏è –ú–∞—Ä–∫–µ—Ä—ã –¥–æ–ª–∂–Ω—ã —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π settings.json –æ—Å—Ç–∞—ë—Ç—Å—è")

if __name__ == "__main__":
    main() 