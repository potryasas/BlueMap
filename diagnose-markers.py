#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ BlueMap
"""

import os
import json
import time
import requests
from pathlib import Path

def check_file_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    print("=" * 60)
    print("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê –ú–ê–†–ö–ï–†–û–í")
    print("=" * 60)
    
    markers_file = r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world\markers.json"
    
    if not os.path.exists(markers_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {markers_file}")
        return False
    
    file_size = os.path.getsize(markers_file)
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
    
    if file_size < 10000:
        print("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON
    try:
        with open(markers_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        total_markers = 0
        print("üìç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:")
        
        for category_name, category_data in data.items():
            if isinstance(category_data, dict) and 'markers' in category_data:
                marker_count = len(category_data['markers'])
                total_markers += marker_count
                print(f"  - {category_name}: {marker_count} –º–∞—Ä–∫–µ—Ä–æ–≤")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {total_markers}")
        return total_markers > 50
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_web_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    print("\n" + "=" * 60)
    print("üåê –ü–†–û–í–ï–†–ö–ê –í–ï–ë-–î–û–°–¢–£–ü–ê")
    print("=" * 60)
    
    urls_to_check = [
        "http://localhost:8100",
        "http://localhost:8100/maps/world/markers.json",
        "http://127.0.0.1:8100",
        "http://127.0.0.1:8100/maps/world/markers.json"
    ]
    
    for url in urls_to_check:
        try:
            print(f"üîó –ü—Ä–æ–≤–µ—Ä—è—é: {url}")
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
                
                if 'markers.json' in url:
                    try:
                        markers_data = response.json()
                        marker_count = sum(len(cat.get('markers', {})) for cat in markers_data.values() if isinstance(cat, dict))
                        print(f"üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏: {marker_count}")
                    except:
                        print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON")
            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        except requests.exceptions.Timeout:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_server_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    print("\n" + "=" * 60)
    print("üìÑ –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –°–ï–†–í–ï–†–ê")
    print("=" * 60)
    
    log_file = r"c:\Personal\TestServer\server.log"
    
    if not os.path.exists(log_file):
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        return
    
    try:
        with open(log_file, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è BlueMap
        bluemap_lines = []
        for i, line in enumerate(lines):
            if 'bluemap' in line.lower():
                bluemap_lines.append((i, line.strip()))
        
        if bluemap_lines:
            print("üîµ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è BlueMap:")
            for line_num, line in bluemap_lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                print(f"  [{line_num+1}] {line}")
        else:
            print("‚ùå BlueMap –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö")
        
        # –ò—â–µ–º –æ—à–∏–±–∫–∏
        error_lines = []
        for i, line in enumerate(lines[-100:], len(lines)-100):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
            if any(word in line.lower() for word in ['error', 'exception', 'failed', 'warning']):
                error_lines.append((i, line.strip()))
        
        if error_lines:
            print("\n‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            for line_num, line in error_lines[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
                print(f"  [{line_num+1}] {line}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def check_bluemap_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BlueMap"""
    
    print("\n" + "=" * 60)
    print("‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò BlueMap")
    print("=" * 60)
    
    config_files = [
        r"c:\Personal\TestServer\plugins\BlueMap\bluemap.properties",
        r"c:\Personal\TestServer\plugins\BlueMap\markers.properties",
        r"c:\Personal\TestServer\plugins\BlueMap\marker-sets.properties"
    ]
    
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úÖ {os.path.basename(config_file)} –Ω–∞–π–¥–µ–Ω")
            
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                if 'marker' in content.lower():
                    print(f"   üìç –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"‚ùå {os.path.basename(config_file)} –ù–ï –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ú–ê–†–ö–ï–†–ê–ú–ò BlueMap")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤
    file_ok = check_file_exists()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–¥–æ—Å—Ç—É–ø
    check_web_access()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    check_server_logs()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    check_bluemap_config()
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if not file_ok:
        print("‚ùå –§–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç!")
        print("üîß –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ fix-markers-file.py –µ—â—ë —Ä–∞–∑")
    else:
        print("‚úÖ –§–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("  1. –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
        print("  2. BlueMap –∫—ç—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é")
        print("  3. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8")
        print("  4. –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏")
    
    print("\nüöÄ –ü–û–ü–†–û–ë–£–ô–¢–ï:")
    print("1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
    print("2. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª: plugins/BlueMap/web/maps/world/markers_backup.json")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
    print("4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∏–≥—Ä–µ: /bluemap reload")
    print("5. –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–∞ (Ctrl+F5)")

if __name__ == "__main__":
    main() 