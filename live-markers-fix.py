#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∂–∏–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ BlueMap
–°–æ–∑–¥–∞–Ω–∏–µ live/markers.json –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ live/players.json
"""

import os
import json
import time
import shutil
from pathlib import Path

def create_live_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é live –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    
    live_dirs = [
        r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world\live",
        "bluemap-test/web/maps/world/live"
    ]
    
    for live_dir in live_dirs:
        if not os.path.exists(live_dir):
            os.makedirs(live_dir, exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {live_dir}")
        else:
            print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {live_dir}")

def convert_markers_to_live_format():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç live –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    source_file = "bluemap-test/web/maps/world/markers.json"
    target_files = [
        "bluemap-test/web/maps/world/live/markers.json",
        r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world\live\markers.json"
    ]
    
    if not os.path.exists(source_file):
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_file}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –º–∞—Ä–∫–µ—Ä–æ–≤
        with open(source_file, 'r', encoding='utf-8') as f:
            markers_data = json.load(f)
        
        print(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(markers_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º live/markers.json –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É—Ç–∏
        for target_file in target_files:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(target_file), exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ live –º–∞—Ä–∫–µ—Ä–æ–≤
            with open(target_file, 'w', encoding='utf-8') as f:
                json.dump(markers_data, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω live —Ñ–∞–π–ª: {target_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def create_live_players_fallback():
    """–°–æ–∑–¥–∞–µ—Ç fallback —Ñ–∞–π–ª live/players.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    
    player_files = [
        "bluemap-test/web/maps/world/live/players.json",
        r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world\live\players.json"
    ]
    
    fallback_players = {
        "players": []
    }
    
    for player_file in player_files:
        if not os.path.exists(player_file):
            os.makedirs(os.path.dirname(player_file), exist_ok=True)
            
            with open(player_file, 'w', encoding='utf-8') as f:
                json.dump(fallback_players, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω live/players.json: {player_file}")
        else:
            print(f"üìÅ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {player_file}")

def update_webapp_settings():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ live –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    settings_files = [
        "bluemap-test/web/maps/world/settings.json",
        r"c:\Personal\TestServer\plugins\BlueMap\web\maps\world\settings.json"
    ]
    
    for settings_file in settings_files:
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É live –º–∞—Ä–∫–µ—Ä–æ–≤
                if 'live' not in settings:
                    settings['live'] = {}
                
                settings['live']['markers'] = True
                settings['live']['players'] = True
                
                with open(settings_file, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω settings.json: {settings_file}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ {settings_file}: {e}")

def create_simple_http_server_test():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è live –¥–∞–Ω–Ω—ã—Ö"""
    
    test_script = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import http.server
import socketserver
import os
import json

class CustomHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        print(f"üåê REQUEST: {self.path}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ live –¥–∞–Ω–Ω—ã—Ö
        if self.path.endswith('/live/markers.json'):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤
            markers_file = "live/markers.json"
            if os.path.exists(markers_file):
                with open(markers_file, 'r', encoding='utf-8') as f:
                    data = f.read()
                self.wfile.write(data.encode('utf-8'))
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã live markers")
            else:
                self.wfile.write(b'{}')
                print("‚ö†Ô∏è Live markers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        if self.path.endswith('/live/players.json'):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
            players_file = "live/players.json"
            if os.path.exists(players_file):
                with open(players_file, 'r', encoding='utf-8') as f:
                    data = f.read()
                self.wfile.write(data.encode('utf-8'))
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã live players")
            else:
                self.wfile.write(b'{"players":[]}')
                print("‚ö†Ô∏è Live players –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        return super().do_GET()

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
PORT = 8100
os.chdir("bluemap-test/web/maps/world")

with socketserver.TCPServer(("", PORT), CustomHandler) as httpd:
    print(f"üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{PORT}")
    print("üìç Live markers: http://localhost:8100/live/markers.json")
    print("üë• Live players: http://localhost:8100/live/players.json")
    httpd.serve_forever()
"""
    
    with open("test-live-server.py", 'w', encoding='utf-8') as f:
        f.write(test_script)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω test-live-server.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è live –¥–∞–Ω–Ω—ã—Ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ñ–ò–í–´–• –ú–ê–†–ö–ï–†–û–í")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ live
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π live...")
    create_live_directory()
    
    # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –≤ live —Ñ–æ—Ä–º–∞—Ç
    print("\n2Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ live —Ñ–æ—Ä–º–∞—Ç...")
    if convert_markers_to_live_format():
        print("‚úÖ –ú–∞—Ä–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤")
        return
    
    # 3. –°–æ–∑–¥–∞–µ–º fallback –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ fallback –¥–ª—è live/players.json...")
    create_live_players_fallback()
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    update_webapp_settings()
    
    # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    print("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞...")
    create_simple_http_server_test()
    
    print("\n" + "=" * 50)
    print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 50)
    
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test-live-server.py")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8100")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏")
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê LIVE –î–ê–ù–ù–´–•:")
    print("- http://localhost:8100/live/markers.json")
    print("- http://localhost:8100/live/players.json")
    
    print("\nüí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:")
    print("–ú–∞—Ä–∫–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ '–∂–∏–≤—ã–µ'")
    print("–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏–≥—Ä–æ–∫–∞–º, –Ω–æ —Å—Ç–∞—Ç–∏—á–Ω–æ (–Ω–µ –¥–≤–∏–≥–∞—é—Ç—Å—è)")

if __name__ == "__main__":
    main() 