#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è BlueMap
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –∏–∑ _markers_/marker_world.json –≤ —Ñ–æ—Ä–º–∞—Ç BlueMap
"""

import json
import os
import shutil
from pathlib import Path

def convert_markers():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤"""
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    source_file = "_markers_/marker_world.json"
    target_dir = "bluemap-test/web/maps/world/"
    target_file = target_dir + "markers.json"
    
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –º–∞—Ä–∫–µ—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(source_file):
        print(f"‚ùå –§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞—ë–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(target_dir, exist_ok=True)
    
    try:
        # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        with open(source_file, 'r', encoding='utf-8') as f:
            source_data = json.load(f)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {source_file}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç BlueMap
        bluemap_markers = convert_to_bluemap_format(source_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª
        with open(target_file, 'w', encoding='utf-8') as f:
            json.dump(bluemap_markers, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª: {target_file}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
        copy_marker_icons()
        
        print("üéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –ú–∞—Ä–∫–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {target_file}")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8100 —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–∞—Ä–∫–µ—Ä—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def convert_to_bluemap_format(source_data):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç BlueMap"""
    
    bluemap_data = {}
    
    if 'sets' not in source_data:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
        return {}
    
    total_markers = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for set_id, set_data in source_data['sets'].items():
        
        if 'markers' not in set_data:
            continue
            
        category_markers = {}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for marker_id, marker_data in set_data['markers'].items():
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É
            icon = marker_data.get('icon', 'default')
            if not icon.endswith('.png'):
                icon += '.png'
            
            # –°–æ–∑–¥–∞—ë–º –º–∞—Ä–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ BlueMap
            bluemap_marker = {
                "type": "poi",
                "label": marker_data.get('label', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                "icon": f"assets/{icon}",
                "position": {
                    "x": float(marker_data.get('x', 0)),
                    "y": float(marker_data.get('y', 64)),
                    "z": float(marker_data.get('z', 0))
                },
                "anchor": {"x": 16, "y": 16},
                "sorting": 100,
                "listed": True,
                "minDistance": 10,
                "maxDistance": 100000
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            marker_key = f"{marker_id}_{total_markers}"
            category_markers[marker_key] = bluemap_marker
            total_markers += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category_markers:
            bluemap_data[set_id] = {
                "label": set_data.get('label', set_id),
                "toggleable": True,
                "defaultHidden": False,
                "sorting": 0,
                "markers": category_markers
            }
    
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {total_markers} –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ {len(bluemap_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    
    return bluemap_data

def copy_marker_icons():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫–∏ –≤ –≤–µ–±-–ø–∞–ø–∫—É"""
    
    source_dir = "_markers_/"
    target_dir = "bluemap-test/web/assets/"
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∏–∫–æ–Ω–æ–∫
    os.makedirs(target_dir, exist_ok=True)
    
    copied_count = 0
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã
    for filename in os.listdir(source_dir):
        if filename.endswith('.png'):
            source_path = os.path.join(source_dir, filename)
            target_path = os.path.join(target_dir, filename)
            
            try:
                shutil.copy2(source_path, target_path)
                copied_count += 1
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {filename}: {e}")
    
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied_count} –∏–∫–æ–Ω–æ–∫ –≤ {target_dir}")

def create_live_players():
    """–°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª live-players.json"""
    
    target_file = "bluemap-test/web/maps/world/live-players.json"
    live_players_data = {}
    
    try:
        with open(target_file, 'w', encoding='utf-8') as f:
            json.dump(live_players_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {target_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è live-players.json: {e}")

def create_settings_json():
    """–°–æ–∑–¥–∞—ë—Ç settings.json –¥–ª—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞"""
    
    target_file = "bluemap-test/web/maps/world/settings.json"
    
    settings_data = {
        "name": "world",
        "sorting": 0,
        "startLocation": {
            "x": 0,
            "z": 0
        }
    }
    
    try:
        with open(target_file, 'w', encoding='utf-8') as f:
            json.dump(settings_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {target_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è settings.json: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("=" * 50)
    print("üó∫Ô∏è  –ö–û–ù–í–ï–†–¢–ï–† –ú–ê–†–ö–ï–†–û–í BlueMap")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    if not os.path.exists("_markers_"):
        print("‚ùå –ü–∞–ø–∫–∞ _markers_ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    if not os.path.exists("bluemap-test"):
        print("‚ùå –ü–∞–ø–∫–∞ bluemap-test –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É bluemap-test/web/maps/world/ –≤—Ä—É—á–Ω—É—é")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    success = convert_markers()
    
    if success:
        # –°–æ–∑–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        create_live_players()
        create_settings_json()
        
        print("\n" + "=" * 50)
        print("üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("=" * 50)
        print("1. üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Bukkit —Å–µ—Ä–≤–µ—Ä (—Å–º. BUKKIT_SERVER_SETUP.md)")
        print("2. üìÇ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ plugins/BlueMap/web/")
        print("3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–ª–∞–≥–∏–Ω–æ–º BlueMap")
        print("4. üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8100")
        print("=" * 50)
    else:
        print("\n‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main() 